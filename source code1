#include <iostream>
	#include <fstream>
	#include <string>
	#include <math.h> 
	#include <iomanip>  

	using namespace std;


	short unsigned int rawData[1000][1000]; //ROW & COLUMN

//this following class is for get image tag.
	
class header
{
public:
	short int byteOrder;
	short int version;
	short int offset;
	short int numberOfDE;
};

class description
{
public:
	short int tag;
	short int type;
	long int length;
	long int value;
};

//read a tiff image, extract tag and save imag in .txt file. 
	int main()
	{
		char filename[50], tiffname[50], txtname[50];
		char addtif[5] = ".tif";
		char addtxt[5] = ".txt";
		ifstream input;
		ofstream text;
		cout<<endl;
cout << "\t" << setw(15) << " " << "Please, type a TIFF image file name --> ";
		cin>>filename;
		strcpy(tiffname, filename);
		strcat(tiffname, addtif);
		input.open(tiffname, ios::in | ios::binary);
		header head;
		input.read((char*) &head.byteOrder, 2);
		input.read((char*) &head.version, 2);
		input.read((char*) &head.offset, 4);
		input.read((char*) &head.numberOfDE, 2);
		description *de;
		de = new description[100];
		for(int i=0 ; i<head.numberOfDE ; i++)
		{
			input.read((char*) &de[i].tag, 2);
			input.read((char*) &de[i].type, 2);
			input.read((char*) &de[i].length, 4);
			input.read((char*) &de[i].value, 4);
		}
		cout<<endl;
		cout<<"--------------------"<<endl;
		cout<<"Header File --> "<<tiffname<<endl;
		cout<<"--------------------"<<endl;
		cout<<hex<<uppercase;
		cout<<"Byte Order |  --> "<<head.byteOrder<<endl;
		cout<<"Version    |  --> "<<head.version<<endl;
		cout<<"Offset     |  --> "<<head.offset<<endl;
		cout<<"DE Numbers |  --> "<<dec<<head.numberOfDE<<endl;
		cout<<endl;
		cout<<"--------------------"<<endl;
		cout<<"Descriptions"<<endl;
		cout<<"--------------------"<<endl;
		for(int i=0 ; i<head.numberOfDE ; i++)
		{
			cout<<"Tag      --> "<<de[i].tag<<endl;
			switch(de[i].tag)
			{
			case 254: cout << "Tag Name   : NewSubFileType";
			break;
			case 255: cout << "Tag Name   : SubFileType";				break;
			case 256: cout << "Tag Name   : ImageWidth";                          			break;
			case 257: cout << "Tag Name   : ImageLength"; 	                        			break;	
			case 258: cout << "Tag Name   : BitsPerSample";	
			break;
			case 259: cout << "Tag Name   : Compression";			      break;
case 262: cout << "Tag Name   : PhotometricInterpretation";				
			break;		
			case 273: cout << "Tag Name   : StripOffsets";                           			break;	
			case 277: cout << "Tag Name   : SamplePerPixel";			break;		
			case 278: cout << "Tag Name   : RowPerStrip";				break;		
			case 279: cout << "Tag Name   : StripByteCounts";			break;		
			case 282: cout << "Tag Name   : XResolution";				break;		
			case 283: cout << "Tag Name   : YResolution";				break;		
			default : cout << "Tag Name   : Other Tag";				break;
			}
			cout<< hex << uppercase<<endl;
			cout<<"Type     --> "<<de[i].type<<endl;
			cout<<"Length   --> "<<de[i].length<<endl;
			cout<<"Value    --> "<<de[i].value<<endl;
			cout<<endl<<endl;
		}	 
	strcpy(txtname, filename);
	strcat(txtname, addtxt);
	text.open(txtname, ios::out);
	text<<"--------------------"<<endl;
	text<<"Header File  --> "<<tiffname<<endl;
	text<<"--------------------"<<endl;
	text<<hex<<uppercase;
	text<<"Byte Order   --> "<<head.byteOrder<<endl;
	text<<"Version      --> "<<head.version<<endl;
	text<<"Offset       --> "<<head.offset<<endl;
	text<<"DE Numbers   --> "<<dec<<head.numberOfDE<<endl;
	text<<endl;
	text<<"--------------------"<<endl;
	text<<"Descriptions"<<endl;
	text<<"--------------------"<<endl;
	for(int i=0 ; i<head.numberOfDE ; i++)
	{
		text<<"Tag      --> "<<de[i].tag<<endl;
		switch(de[i].tag)
		{
		case 254: text << "Tag Name   : NewSubFileType"	;			break;
		case 255: text << "Tag Name   : SubFileType";			      break;
		case 256: text << "Tag Name   : ImageWidth";				break;
		case 257: text << "Tag Name   : ImageLength"; 				break;
		case 258: text << "Tag Name   : BitsPerSample";				break;
		case 259: text << "Tag Name   : Compression";				break;
case 262: text << "Tag Name   : PhotometricInterpretation";	
break;		
		case 273: text << "Tag Name   : StripOffsets";				break;	
		case 277: text << "Tag Name   : SamplePerPixel";			break;		
		case 278: text << "Tag Name   : RowPerStrip";				break;		
		case 279: text << "Tag Name   : StripByteCounts";			break;		
		case 282: text << "Tag Name   : XResolution";				break;		
		case 283: text << "Tag Name   : YResolution";				break;		
		default : text << "Tag Name   : Other Tag";				break;
		}
		//text<< hex << uppercase<<endl;
		text<< "Type     --> "<<de[i].type<<endl;
		text<<"Length   --> "<<de[i].length<<endl;
		text<<"Value    --> "<<de[i].value<<endl;
		text<<endl<<endl;
	}
		text.close();
		input.close();	

		system("pause");
	}
